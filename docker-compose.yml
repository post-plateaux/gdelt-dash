services:
  web:
    image: nginx:alpine
    container_name: web
    ports:
      - "8080:80"  # Expose port 8080 on localhost
    volumes:
      - ./html:/usr/share/nginx/html  # Mount the hello world HTML page
      - ./html/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - grafana  # Start after Grafana to avoid any potential conflicts
    networks:
      - backend

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    restart: unless-stopped
    command: tunnel run
    networks:
      - backend

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./provisioning:/etc/grafana/provisioning
    environment:
      - GF_INSTALL_PLUGINS=
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${POSTGRES_HOST}
      - GF_DATABASE_NAME=${POSTGRES_DB}
      - GF_DATABASE_USER=${POSTGRES_USER}
      - GF_DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - GF_DATABASE_SSL_MODE=disable
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_SERVER_HTTP_PORT=3000
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SERVER_ALLOW_EMBEDDING=true
      - GF_SERVER_ROOT_URL=https://fifteen.postplateaux.com/grafana/
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_HEADERS_FRAME_DENY=false
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend

  db:
    image: postgres:16-alpine
    container_name: db
    restart: always
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  create_tables:
    build:
      context: ./create_tables  # Directory containing Dockerfile for create_tables.py
    container_name: create_tables
    depends_on:
      db:
        condition: service_healthy  # Wait until db is healthy
    restart: "no"  # Do not restart after completion
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
    volumes:
      - completion_flags:/flags 
    networks:
      - backend

  gdelt_connect:
    build:
      context: ./gdelt_connect  # Directory containing Dockerfile for fetch_gdelt_and_upload.py
    container_name: gdelt_connect
    depends_on:
      db:
        condition: service_healthy  # Wait until db is healthy
    restart: always  # Restart if it stops
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
    volumes:
      - completion_flags:/flags
    networks:
      - backend

volumes:
  grafana-data:
    driver: local
  postgres_data:
    driver: local
  completion_flags:
    driver: local 

networks:
  backend:
    driver: bridge

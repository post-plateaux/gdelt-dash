services:
  web:
    image: nginx:alpine
    container_name: web
    ports:
      - "8081:80"  # Expose port 8081 on localhost
    volumes:
      - ./html:/usr/share/nginx/html  # Mount the hello world HTML page
      - ./html/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - grafana  # Start after Grafana to avoid any potential conflicts
    restart: unless-stopped
    networks:
      - backend
      - shared_net

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./provisioning:/etc/grafana/provisioning
    environment:
      - GF_INSTALL_PLUGINS=
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=${POSTGIS_HOST}
      - GF_DATABASE_NAME=${POSTGIS_DB}
      - GF_DATABASE_USER=${POSTGIS_USER}
      - GF_DATABASE_PASSWORD=${POSTGIS_PASSWORD}
      - GF_DATABASE_SSL_MODE=disable
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_SERVER_HTTP_PORT=3000
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SERVER_ALLOW_EMBEDDING=true
      - GF_SERVER_ROOT_URL=http://localhost:3000/grafana/
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_HEADERS_FRAME_DENY=false
      - POSTGRES_HOST=${POSTGIS_HOST}
      - POSTGRES_DB=${POSTGIS_DB}
      - POSTGRES_USER=${POSTGIS_USER}
      - POSTGRES_PASSWORD=${POSTGIS_PASSWORD}
    networks:
      - backend
      - shared_net

  create_tables:
    build:
      context: ./create_tables  # Directory containing Dockerfile for create_tables.py
    container_name: create_tables
    restart: "no"  # Do not restart after completion
    environment:
      - POSTGIS_HOST=${POSTGIS_HOST}
      - POSTGIS_DB=${POSTGIS_DB}
      - POSTGIS_USER=${POSTGIS_USER}
      - POSTGIS_PASSWORD=${POSTGIS_PASSWORD}
      - POSTGIS_PORT=${POSTGIS_PORT}
    volumes:
      - completion_flags:/flags 
    networks:
      - backend

  gdelt_connect:
    build:
      context: ./gdelt_connect  # Directory containing Dockerfile for fetch_gdelt_and_upload.py
    container_name: gdelt_connect
    restart: always  # Restart if it stops
    environment:
      - POSTGIS_HOST=${POSTGIS_HOST}
      - POSTGIS_DB=${POSTGIS_DB}
      - POSTGIS_USER=${POSTGIS_USER}
      - POSTGIS_PASSWORD=${POSTGIS_PASSWORD}
      - POSTGIS_PORT=${POSTGIS_PORT}
    volumes:
      - completion_flags:/flags
    networks:
      - backend

volumes:
  grafana-data:
    driver: local
  completion_flags:
    driver: local 

networks:
  backend:
    driver: bridge
  shared_net:
    external: true
